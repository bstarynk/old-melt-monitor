
/// Copyright (C) 2015 Free Software Foundation, Inc. 
/// MONIMELT is a monitor for MELT - see http://gcc-melt.org/ 
/// This file xtradraft.mom is part of MONIMELT, part of GCC
/// sometimes used as a draft to change the state, thru the
/// --xtra-file program argument
/// we usually don't use that file, but we keep it to be able
/// to sometimes reuse parts of it....

///
/// GCC is free software; you can redistribute it and/or modify 
/// it under the terms of the GNU General Public License as published by 
/// the Free Software Foundation; either version 3, or (at your option) 
/// any later version. 
///
///  GCC is distributed in the hope that it will be useful, 
///  but WITHOUT ANY WARRANTY; without even the implied warranty of 
///  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
///  GNU General Public License for more details. 
///  You should have received a copy of the GNU General Public License 
///  along with GCC; see the file COPYING3.   If not see 
///  <http://www.gnu.org/licenses/>. 
///

** webxitm
{
  * comment "formal for the web exchange item"
  * type  item }

..


** lkitm_webx
{
  * comment  "the locked item for the web exchange"
  * type  locked_item }
 %  ^filler_of_plain_kind( variable)
 
..

** reqmethitm
{
  * comment "formal for the request method item"
  * type  item }

..

** restpathval
{
  * comment "formal for the web rest path string value"
  * type  value }
..

** sessval
{
  * comment "formal for the session node value"
  * type  value }
..

** getproc
{
  * comment "closed value for processing GET web request "
  * type value
  }
  ..

** postproc
{
  * comment "closed value for processing POST web request "
  * type value
  }
  ..

** basic_web_html
{
 * comment "function to handle basic web reply in HTML"
 * function_signature  signature_2itm2val_to_void
 * constants {http_POST }
 * formals [ webxitm reqmethitm restpathval sessval ]
 * closed [ getproc postproc ]
 * start _* = __start_block_basic_web_html
   (!
    {
      * comment  "start block of basic_web_html"
      * instructions [
        //////
        _* "set lkitm_webx = webxitm" (! [[ set lkitm_webx webxitm ]]
	   %  ^filler_of_plain_kind( code_statement) !)
	//////
        _* "if reqmethitm==http_POST handle-post-webhtml"
        (! [[ if ^item_same(reqmethitm http_POST)
              __post_block_basic_web_html ]]
           %  ^filler_of_plain_kind( code_statement) !)
      ] // end of instructions from __start_block_basic_web_html
    }
    %  ^filler_of_plain_kind( block)
   !) // end  __start_block_basic_web_html
}
[[
]]
// %  ^filler_of_plain_kind(signature_2itm2val_to_void )
% ^append_function_to_closed_module(the_base_module)
..



** __post_block_basic_web_html
{
  * comment  "first block to process POST requests in basic_web_html"
  * instructions [
  ]
}
[[
]]
 %  ^filler_of_plain_kind( block)
..
/////
** depth
{
  * comment  "usual depth"
  * type  integer }
 
..


** unsync_webexitem_ftell
{
  * code_emitter  ^plain_code_emitter()
  * code_expansion  ^code_expansion( "/*unsync_webexitem_ftell:*/(("  itm1  ")) ")
  * code_type_scanner  ^plain_code_type_scanner()
  * comment  "unsync_webexitem_ftell gives the output offset of a wexexitem itm1"
  * formals  [itm1]
  * type  integer }
 
..

** item_same
{
  * code_emitter  ^plain_code_emitter()
  * code_expansion  ^code_expansion( "/*item_same:*/(("  itm1  ") == (" itm2 "))")
  * code_type_scanner  ^plain_code_type_scanner()
  * comment  "test itm1 == itm2"
  * formals  [itm1 itm2]
  * type  integer }
 
..
////////////////////////////////////////////////////////////////


** maximal_html_output_length
{
  * comment "integer constant for maximal html output length"
  * code "(MOM_MAX_STRING_LENGTH/2)"
  }
          %  ^filler_of_plain_kind(integer)
  ..
  
** basic_html_output 
{
 * comment "internal function to output HTML"
 * function_signature signature_1itm1val1int_to_void
 * constants { }
 * formals [ webxitm val1 depth ]
 * closed [ ]
 * start _* = __start_block_basic_html_output
  (!
    {
      * comment "start block of basic_html_output"
      * instructions [
        //
        _* "if depth>64 fail in basic_html_output" (!
        [[ if ^integer_greater_than(depth 64) __failblock_basic_html_output 
        ]]
          %  ^filler_of_plain_kind( code_statement)
        !)
        //////
        _* "set lkitm_webx = webxitm" (! [[ set lkitm_webx webxitm ]]
           %  ^filler_of_plain_kind( code_statement) !)
        //////
        _* "if webx output too big fail in basic_html_output" (!
        [[ if ^integer_greater_than(^unsync_webexitem_ftell(lkitm_webx) maximal_html_output_length) __failblock_basic_html_output 
        ]]
          %  ^filler_of_plain_kind( code_statement)
        !)
	_* "switch on type of val1 in basic_html_output" (!
	[[ int_switch ^type_of_value(val1)
	^case (integer_type __block_when_integer_basic_html)
	^case (string_type __block_when_string_basic_html)
	^case (double_type __block_when_double_basic_html)
	]]
          %  ^filler_of_plain_kind( code_statement)
	!)
      ]
    }
    %  ^filler_of_plain_kind( block)
  !)
}
[[
]]
% ^append_function_to_closed_module(the_base_module)
..


** __block_when_integer_basic_html
{
 * comment "block to output an integer in basic_html_output"
 * instructions [
 
 ]
 }
[[
]]
%  ^filler_of_plain_kind( block)
..


** __block_when_string_basic_html
{
 * comment "block to output a string in basic_html_output"
 * instructions [
 ]
 }
[[
]]
%  ^filler_of_plain_kind( block)
..


** __block_when_double_basic_html
{
 * comment "block to output a double in basic_html_output"
 * instructions [
 ]
 }
[[
]]
%  ^filler_of_plain_kind( block)
..

** __failblock_basic_html_output
{
  * comment "fail block of basic_html_output"
  * instructions [
        _* "fail in basic_html_output" (! [[ fail ]]
	  %  ^filler_of_plain_kind( code_statement)
	!)
  ]
}
[[
]]
%  ^filler_of_plain_kind( block)
..
////////////////////////////////////////////////////////////////

** basic_web_json
{
 * comment "function to handle basic web reply in JSON"
 * function_signature  signature_2itm2val_to_void
 * constants { }
 * formals [ webxitm reqmethitm restpathval sessval ]
 * closed [ getproc postproc ]
 * start _* = __start_block_basic_web_json
  (!
    {
      * comment "start block of basic_web_json"
      * instructions [
        /////
        _* "set lkitm_webx = webxitm" (! [[ set lkitm_webx webxitm ]]
	  %  ^filler_of_plain_kind( code_statement)
	!)
      ] // end of instructions from __start_block_basic_web_json
    }
    %  ^filler_of_plain_kind( block)
  !) // end __start_block_basic_web_json
}
[[
]]
% ^append_function_to_closed_module(the_base_module)
..


/// eof xtradraft.mom
