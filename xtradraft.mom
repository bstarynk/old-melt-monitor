
/// Copyright (C) 2015 Free Software Foundation, Inc. 
/// MONIMELT is a monitor for MELT - see http://gcc-melt.org/ 
/// This file xtradraft.mom is part of MONIMELT, part of GCC
/// sometimes used as a draft to change the state, thru the
/// --xtra-file program argument
/// we usually don't use that file, but we keep it to be able
/// to sometimes reuse parts of it....

///
/// GCC is free software; you can redistribute it and/or modify 
/// it under the terms of the GNU General Public License as published by 
/// the Free Software Foundation; either version 3, or (at your option) 
/// any later version. 
///
///  GCC is distributed in the hope that it will be useful, 
///  but WITHOUT ANY WARRANTY; without even the implied warranty of 
///  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
///  GNU General Public License for more details. 
///  You should have received a copy of the GNU General Public License 
///  along with GCC; see the file COPYING3.   If not see 
///  <http://www.gnu.org/licenses/>. 
///


//// Practical usage hint: make a new directory /tmp/newmonimelt/
//// containing a fresh modules/ sub-directory and, for every file
//// in monimelt.git/, a symlink to it.
//// Then run:

/////  ./monimelt -X xtradraft.mom --chdir /tmp/newmonimelt/ \
/////             --generate-c-module the_base_module \
/////             --dump-state /tmp/newmonimelt/

** webxitm
{
  * comment "formal for the web exchange item"
  * type  item }

..


** lkitm_webx
{
  * comment  "the locked item for the web exchange"
  * type  locked_item }
 %  ^filler_of_plain_kind( variable)
 
..

** lkitm_conn
{
  * comment  "the locked item for the connective"
  * type  locked_item }
 %  ^filler_of_plain_kind( variable)
 
..


** reqmethitm
{
  * comment "formal for the request method item"
  * type  item }

..

** restpathval
{
  * comment "formal for the web rest path string value"
  * type  value }
..

** sessval
{
  * comment "formal for the session node value"
  * type  value }
..

** getproc
{
  * comment "closed value for processing GET web request "
  * type value
  }
  ..

** postproc
{
  * comment "closed value for processing POST web request "
  * type value
  }
  ..

** basic_web_html
{
 * comment "function to handle basic web reply in HTML"
 * signature  signature_2itm2val_to_void
 * constants {http_POST }
 * formals [ webxitm reqmethitm restpathval sessval ]
 * closed [ getproc postproc ]
 * start _* = __start_block_basic_web_html
   (!
    {
      * comment  "start block of basic_web_html"
      * instructions [
        //////
        _* "set lkitm_webx = webxitm" (! [[ set lkitm_webx webxitm ]]
	   %  ^filler_of_plain_kind( code_statement) !)
	//////
        _* "if reqmethitm==http_POST handle-post-webhtml"
        (! [[ if ^item_same(reqmethitm http_POST)
              __post_block_basic_web_html ]]
           %  ^filler_of_plain_kind( code_statement) !)
	_* "else jump to get-head block webml"
	(! [[ jump  __gethead_block_basic_web_html ]] 
           %  ^filler_of_plain_kind( code_statement) !)
      ] // end of instructions from __start_block_basic_web_html
    }
    %  ^filler_of_plain_kind( block)
   !) // end  __start_block_basic_web_html
}
[[
]]
// %  ^filler_of_plain_kind(signature_2itm2val_to_void )
% ^append_function_to_closed_module(the_base_module)
..



** __post_block_basic_web_html
{
  * comment  "first block to process POST requests in basic_web_html"
  * instructions [
  _* "debug chunk before apply postproc; in basic_web_html" (!
  [[ chunk "/*before applying postproc in basic_web_html*/\n"
    "  MOM_DEBUGPRINTF(web, \"basic_web_html: before applying postproc=%s webx=%s restpathval=%s sessval=%s\",\n"
    "     mom_output_gcstring("postproc "), mom_item_cstring(" lkitm_webx
    "), mom_output_gcstring(" restpathval "), mom_output_gcstring(" sessval "));\n" ]]
   %  ^filler_of_plain_kind( code_statement) !)
   _* "apply postproc, expecting a tasklet; in basic_web_html" (!
   ///@@@ MARCHE PAS
     [[ apply signature_1itm2val_to_item itmvar_tasklet postproc lkitm_webx restpathval sessval ]] 
   %  ^filler_of_plain_kind( code_statement) !)
  _* "debug chunk after apply postproc; in basic_web_html" (!
  [[ chunk "/*after applying postproc in basic_web_html*/\n"
    "  MOM_DEBUGPRINTF(web, \"basic_web_html: after applying postproc=%s webx=%s restpathval=%s sessval=%s got tasklet=%s\",\n"
    "     mom_output_gcstring("postproc "), mom_item_cstring(" lkitm_webx
    "), mom_output_gcstring(" restpathval
    "), mom_output_gcstring(" sessval "), mom_item_cstring(" itmvar_tasklet ");\n" ]]
    %  ^filler_of_plain_kind( code_statement) !)
    //// @@@A COMPLETER: should lock tasklet, test that it is a tasklet,
    //// put the webx inside, add it at front of the agenda
   _* "jump endsuccess after postproc; in basic_web_html" (!
     [[ jump __endsuccess_block_basic_web_html ]]
    %  ^filler_of_plain_kind( code_statement) !)
  ]
}
[[
]]
 %  ^filler_of_plain_kind( block)
..


** __gethead_block_basic_web_html
{
  * comment  "first block to process GET or HEAD requests in basic_web_html"
  * instructions [
  //@@@A REVOIR  this is wrong, we should add a tasklet
   _* "apply getproc; in basic_web_html" (!
     [[ apply signature_1itm2val_to_void getproc lkitm_webx restpathval sessval ]]
    %  ^filler_of_plain_kind( code_statement) !)
   _* "jump endsuccess after getproc; in basic_web_html" (!
     [[ jump __endsuccess_block_basic_web_html ]]
    %  ^filler_of_plain_kind( code_statement) !)
  ]
}
[[
]]
 %  ^filler_of_plain_kind( block)
..

** __endsuccess_block_basic_web_html
{
  * comment  "last successblock to process requests in basic_web_html"
  * instructions [
  ]
}
[[
]]
 %  ^filler_of_plain_kind( block)
..


/////
** depth
{
  * comment  "usual depth"
  * type  integer }
 
..


** unsync_webexitem_ftell
{
  * code_emitter  ^plain_code_emitter()
  * code_expansion  ^code_expansion( "/*unsync_webexitem_ftell:*/(mom_unsync_webexitem_ftell("  itm1  ")) ")
  * code_type_scanner  ^plain_code_type_scanner()
  * comment  "unsync_webexitem_ftell gives the output offset of a wexexitem itm1"
  * formals  [itm1]
  * type  integer }
 
..

** item_same
{
  * code_emitter  ^plain_code_emitter()
  * code_expansion  ^code_expansion( "/*item_same:*/(("  itm1  ") == (" itm2 "))")
  * code_type_scanner  ^plain_code_type_scanner()
  * comment  "test itm1 == itm2"
  * formals  [itm1 itm2]
  * type  integer }
 
..
////////////////////////////////////////////////////////////////


** maximal_html_output_length
{
  * comment "integer constant for maximal html output length"
  * code "(MOM_MAX_STRING_LENGTH/2)"
  }
          %  ^filler_of_plain_kind(integer)
  ..


** maximal_html_output_depth
{
  * comment "integer constant for maximal html output recursive depth"
  * integer 80
  }
%  ^filler_of_plain_kind(integer)
..



** basic_html_output_value 
{
 * comment "internal function to output HTML in webxitm for value val1 at given depth"
 * signature signature_1itm1val1int_to_void
 * constants { basic_html_output_item basic_html_output_value __constantclo_basic_html_output_item
               simple_html_tag simple_html_start simple_html_between simple_html_end code }
 * formals [ webxitm val1 depth ]
 * closed [ ]
 * start _* = __start_block_basic_html_output_value
  (!
    {
      * comment "start block of basic_html_output_value"
      * instructions [
        //
        _* "if depth too big fail in basic_html_output_value" (!
        [[ if ^integer_greater_than(depth maximal_html_output_depth) __failblock_basic_html_output_value 
        ]]
          %  ^filler_of_plain_kind( code_statement)
        !)
        //////
        _* "set lkitm_webx = webxitm" (! [[ set lkitm_webx webxitm ]]
           %  ^filler_of_plain_kind( code_statement) !)
        //////
        _* "if webx output too big fail in basic_html_output_value" (!
        [[ if ^integer_greater_than(^unsync_webexitem_ftell(lkitm_webx) maximal_html_output_length) __failblock_basic_html_output_value 
        ]]
          %  ^filler_of_plain_kind( code_statement)
        !)
	_* "switch on type of val1 in basic_html_output_value" (!
	[[ int_switch ^type_of_value(val1)
	^case (integer_type __block_when_integer_basic_html)
	^case (string_type __block_when_string_basic_html)
	^case (double_type __block_when_double_basic_html)
	^case (item_type __block_when_item_basic_html)
	^case (node_type __block_when_node_basic_html)
	^case (tuple_type __block_when_sequ_basic_html)
	^case (set_type __block_when_sequ_basic_html)
	]]
          %  ^filler_of_plain_kind( code_statement)
	!)
      ]
    }
    %  ^filler_of_plain_kind( block)
  !)
}
[[
]]
% ^append_function_to_closed_module(the_base_module)
..


** __block_when_integer_basic_html
{
 * comment "block to output an integer in basic_html_output_value"
 * instructions [
   _* "print integer to web in basic_web_html" (!
     [[ chunk "(void) mom_unsync_webexitem_printf(" lkitm_webx ", \"%lld\", (long long) mom_value_to_int(" val1 ", -1));\n" ]]
     % ^filler_of_plain_kind(code_statement)
   !)
     _* "success after integer output; in basic_html_output_value"
     (! [[ jump __succeedblock_basic_html_output_value ]]
     %  ^filler_of_plain_kind( code_statement) !)
 ]
 }
[[
]]
%  ^filler_of_plain_kind( block)
..


** __block_when_string_basic_html
{
 * comment "block to output a string in basic_html_output_value"
 * instructions [
   _* "print string, with <br/>, as HTML encoded, in basic_web_html" (!
     [[ chunk "mom_output_utf8string_html (mom_unsync_webexitem_file ("
              lkitm_webx "), mom_value_to_string(" val1
	      "), MOM_HTML_WITH_BREAK)" ]]
     % ^filler_of_plain_kind(code_statement)
   !)
     _* "success after string output; in basic_html_output_value"
     (! [[ jump __succeedblock_basic_html_output_value ]]
     %  ^filler_of_plain_kind( code_statement) !)
 ]
 }
[[
]]
%  ^filler_of_plain_kind( block)
..


** __block_when_double_basic_html
{
 * comment "block to output a double in basic_html_output_value"
 * instructions [
   _* "print double to web in basic_web_html" (!
	[[ chunk "(void) mom_unsync_webexitem_printf(" lkitm_webx
	         ", \"%g\", mom_value_to_double(" val1 "));\n" ]]
       % ^filler_of_plain_kind(code_statement)
       !)
     _* "success after double output; in basic_html_output_value"
     (! [[ jump __succeedblock_basic_html_output_value ]]
     %  ^filler_of_plain_kind( code_statement) !)
 ]
 }
[[
]]
%  ^filler_of_plain_kind( block)
..

** __constantclo_basic_html_output_item
{ * comment "the quoted ^basic_html_output_item () constant"
  * value ^basic_html_output_item ()
  * type value }
  % ^filler_of_plain_kind(constant)
..

** __block_when_item_basic_html
{
 * comment "block to output an item in basic_html_output_value"
 * instructions [
 
   _* "apply basic_html_output_item to lkitm_webx item-value (depth+1)" (!
      [[ apply signature_2itm1int_to_void __constantclo_basic_html_output_item
            lkitm_webx ^value_to_item(val1) ^integer_add(depth 1)
      ]]
      % ^filler_of_plain_kind(code_statement)
   !)
     _* "success after item output; in basic_html_output_value"
     (! [[ jump __succeedblock_basic_html_output_value ]]
     %  ^filler_of_plain_kind( code_statement) !)
 ]
 }
[[
]]
%  ^filler_of_plain_kind( block)
..


** simple_html_tag  
{
  * comment  "kind for simple HTML tags, used as connectives"
  * dumped_item_emitter  ^emitter_of_plain_kind() }
 
..

** simple_html_start  
{
  * comment  "in simple HTML tags connective, give the closure in charge of emission before the node" }
 
..


** simple_html_between
{
  * comment  "in simple HTML tags connective, give the closure in charge of emission between sons" }
 
..

** simple_html_end  
{
  * comment  "in simple HTML tags connective, give the closure in charge of emission after the node" }
 
..



** __block_when_node_basic_html
{
 * comment "block to output a node in basic_html_output_value"
 * instructions [

     _* "debug chunk at start of node in basic_html_output_value" (!
     [[ chunk "/*debug start node basic_html_output_value*/\n"
       "  MOM_DEBUGPRINTF(web, \"basic_html_output_value start node lkitm_webx=%s val1=%s depth=%d\", \n"
       "     mom_item_cstring(" lkitm_webx "), mom_output_gcstring(" val1 "), (int)" depth ");" ]]
       %  ^filler_of_plain_kind( code_statement) !)
     _* "set varlen := arity of val1; in basic_html_output_value"
     (! [[ set varlen ^value_node_arity(val1) ]]
     %  ^filler_of_plain_kind( code_statement) !)
     //
     _* "set lkitm_conn := connective of val1; in basic_html_output_value"
     (! [[ set lkitm_conn ^value_node_conn(val1) ]]
     %  ^filler_of_plain_kind( code_statement) !)
     _* "if lkitm_conn is code, process it; in basic_html_output_value"
     (! [[ if ^item_same(lkitm_conn code) __block_code_html_node ]]
     %  ^filler_of_plain_kind( code_statement) !)
     _* "if lkitm_conn has kind simple_html_tag, process it; in basic_html_output_value"
     (! [[ if ^item_has_kind(lkitm_conn simple_html_tag) __block_simple_html_node ]]
     %  ^filler_of_plain_kind( code_statement) !)
     _* "apply val1 to webxitm thisclosure (depth+1); in basic_html_output_value"
     (! [[ apply signature_1itm1val1int_to_void val1 lkitm_webx ^this_closure()  ^integer_add(depth 1) ]]
     %  ^filler_of_plain_kind( code_statement) !)
     _* "success after application; in basic_html_output_value"
     (! [[ jump __succeedblock_basic_html_output_value ]]
     %  ^filler_of_plain_kind( code_statement) !)
 ]
 }
[[
]]
%  ^filler_of_plain_kind( block)
..

** __block_code_html_node 
{
 * comment "block to output a code node, as a verbatim quotation, in basic_html_output_value"
 * instructions [
   _* "if varlen != 1 fail for code node; in basic_html_output_value"
   (! [[ if ^integer_different(varlen 1)  __failblock_basic_html_output_value  ]]
     %  ^filler_of_plain_kind( code_statement) !)
   _* "set var_son := 0-th node of code-node val1; in basic_html_output_value"
   (! [[ set var_son ^value_node_nth(val1 0) ]]
     %  ^filler_of_plain_kind( code_statement) !)
   _* "if var_son is string, jump to output string code; in basic_html_output_value"
   (! [[ if ^value_is_string(var_son)  __block_string_code_html_node ]]
     %  ^filler_of_plain_kind( code_statement) !)
   _* "if var_son is item, jump to output item code; in basic_html_output_value"
   (! [[ if ^value_is_item(var_son)  __block_item_code_html_node ]]
     %  ^filler_of_plain_kind( code_statement) !)
   
 ]
}
%  ^filler_of_plain_kind( block)
..


** __block_string_code_html_node
{
 * comment "block to output a string code node in basic_html_output_value"
 * instructions [
  _* "chunk to output code string" 
        (! [[ chunk "/*output verbatim code string */ mom_unsync_webexitem_fputs(" 
                    lkitm_webx ", mom_value_cstr(" var_son "));" ]]
     %  ^filler_of_plain_kind( code_statement) !)
  _* "jump to success for output code string of basic_html_output_value"
  (! [[ jump __succeedblock_basic_html_output_value ]]
      %  ^filler_of_plain_kind( code_statement) !)
		    
 ]
}
%  ^filler_of_plain_kind( block)
..

 
** __block_item_code_html_node
{
 * comment "block to output an item code node in basic_html_output_value"
 * instructions [
  _* "chunk to output code string" 
        (! [[ chunk "/*output verbatim code item */ mom_unsync_webexitem_fputs(" 
                    lkitm_webx ", mom_item_cstring(mom_value_to_item (" var_son ")));" ]]
     %  ^filler_of_plain_kind( code_statement) !)
  _* "jump to success for output code item of basic_html_output_value"
  (! [[ jump __succeedblock_basic_html_output_value ]]
      %  ^filler_of_plain_kind( code_statement) !)
		    
 ]
}
%  ^filler_of_plain_kind( block)
..

 

** __block_simple_html_node
{
 * comment "block to output a simple html node in basic_html_output_value"
 * instructions [
     _* "set var_start := simple_html_start of lkitm_conn; in basic_html_output_value"
     (! [[ set var_start ^unsync_get_attribute(lkitm_conn simple_html_start) ]]
     % ^filler_of_plain_kind(code_statement) !)
     _* "set var_end := simple_html_end of lkitm_conn; in basic_html_output_value"
     (! [[ set var_end ^unsync_get_attribute(lkitm_conn simple_html_end) ]]
     % ^filler_of_plain_kind(code_statement) !)
     _* "set var_between := simple_html_between of lkitm_conn; in basic_html_output_value"
     (! [[ set var_between ^unsync_get_attribute(lkitm_conn simple_html_between) ]]
     % ^filler_of_plain_kind(code_statement) !)
     _* "set varix := 0; basic_html_output_value, for node"
     (! [[ set varix 0 ]]
     %  ^filler_of_plain_kind( code_statement) !)
     _* "if var_start is node, apply it; in basic_html_output_value"
     (!  [[  if  ^value_is_node(var_start) __block_apply_start_simple_html_node ]]
     %  ^filler_of_plain_kind( code_statement) !)
     _* "else -var_start non-node- jump to start looping;  in basic_html_output_value"
     (! [[ jump __block_start_loop_simple_html_node ]]
     %  ^filler_of_plain_kind( code_statement) !)
 ]
 }
% ^filler_of_plain_kind(block)
 ..


** __block_apply_start_simple_html_node 
{
 * comment "block to apply var_start to output a simple html node in basic_html_output_value"
 * instructions [
   _* "apply var_start to lkitm_webx val1 depth"
   (! [[ apply signature_1itm1val1int_to_void var_start lkitm_webx val1 depth ]]
   %  ^filler_of_plain_kind( code_statement) !)
   _* "jump to start of loop on simple html _node
    (! [[ jump __block_start_loop_simple_html_node ]]
     %  ^filler_of_plain_kind( code_statement) !)
 ]
 }
% ^filler_of_plain_kind(block)
..


** __block_start_loop_simple_html_node
{
* comment "block to start looping on sons of simple html node in basic_html_output_value"
* instructions [
   _* "if varix == 0 jump to block process son simple html node"
   (! [[ if ^integer_equal(varix 0) __block_process_simple_html_node ]]
    % ^filler_of_plain_kind(code_statement) !)
   _* "apply var_between to lkitm_webx val1 depth"
   (! [[ apply signature_1itm1val1int_to_void var_between lkitm_webx val1 depth ]] 
     % ^filler_of_plain_kind(code_statement) !)
   _* "jump to block to process the current son in basic_html_output_value"
   (! [[ jump __block_process_simple_html_node ]] 
     % ^filler_of_plain_kind(code_statement) !)
  ]
}
% ^filler_of_plain_kind(block)
..
 

** __block_process_simple_html_node 
{
  * comment "block to process the current son of simple html node in basic_html_output_value"
  * instructions [
  _* "apply this closure to webxitm currentson depth+1; in basic_html_output_value"
  (! [[ apply  signature_1itm1val1int_to_void ^this_closure() lkitm_webx
      ^value_node_nth(val1 varix) ^integer_add(depth 1) ]]
   %  ^filler_of_plain_kind( code_statement)  !)

   _* "increment varix; node in basic_html_output_value"
      (! [[  set  varix  ^integer_add( varix  1) ]]
         %  ^filler_of_plain_kind( code_statement) !)

   _* "loop again on son of node; in basic_html_output_value"
    (! [[ jump __block_start_loop_simple_html_node ]]
         %  ^filler_of_plain_kind( code_statement) !)

  ]
}
% ^filler_of_plain_kind(block)
..

** __block_when_sequ_basic_html
{
 * comment "block to output a sequence in basic_html_output_value"
 * instructions [
     _* "set varlen := length of val1 in basic_html_output_value"
     (! [[ set varlen ^value_sequence_length(val1) ]]
     %  ^filler_of_plain_kind( code_statement) !)
     _* "set varix := 0  in basic_html_output_value, for seq"
     (! [[ set varix 0 ]]
     %  ^filler_of_plain_kind( code_statement) !)
 ]
 }
[[
]]
%  ^filler_of_plain_kind( block)
..


** var_subitm
{
  * comment  "the item variable for the subitem"
  * type  item }
 %  ^filler_of_plain_kind( variable)
 
..



** var_son
{
  * comment  "the value variable for the son"
  * type  value }
 %  ^filler_of_plain_kind( variable)
 
..

** var_start
{
  * comment  "the value variable for the start"
  * type  value }
 %  ^filler_of_plain_kind( variable)
 
..

** var_end
{
  * comment  "the value variable for the end"
  * type  value }
 %  ^filler_of_plain_kind( variable)
 
..

** var_between
{
  * comment  "the value variable for the between"
  * type  value }
 %  ^filler_of_plain_kind( variable)
 
..


** __loopblock_seq_basic_html_output_value
{
  * comment "loop sequence block of basic_html_output_value"
  * instructions [
     _* "if varix >= varlen succeed in basic_html_output_value"
     (! [[ if ^integer_greater_or_equal(varix varlen)  __succeedblock_basic_html_output_value ]]
     %  ^filler_of_plain_kind( code_statement) !)
     _* "set var_subitm := component #varix of val1 in basic_html_output_value"
     (! [[ set var_subitm  ^value_sequence_nth(val1 varix) ]]
     %  ^filler_of_plain_kind( code_statement) !)
   //
   _* "apply basic_html_output_item to lkitm_webx var_subitm (depth+1)" (!
      [[ apply signature_2itm1int_to_void __constantclo_basic_html_output_item
            lkitm_webx var_subitm ^integer_add(depth 1)
      ]]
      % ^filler_of_plain_kind(code_statement) !)
   //
   _* "increment varix in basic_html_output_value"
      (! [[  set  varix  ^integer_add( varix  1) ]]
         %  ^filler_of_plain_kind( code_statement) !)
   //
   _* "jump to loop start for sequence in basic_html_output_value"
   (! [[ jump __loopblock_seq_basic_html_output_value ]]
         %  ^filler_of_plain_kind( code_statement) !)
  ]
  }
%  ^filler_of_plain_kind( block)
..
  


** __failblock_basic_html_output_value
{
  * comment "fail block of basic_html_output_value"
  * instructions [
        _* "warn chunk for fail in basic_html_output_value" (!
	   [[ chunk "/*warn chunk fail basic_html_output_value*/\n"
	   "  MOM_WARNPRINTF(\"failure basic_html_output_value webxitm %s value %s depth %d\",\n"
	   "    mom_item_cstring(" webxitm "), mom_output_gcstring(" val1 "), (int)" depth ");\n" ]]
	  %  ^filler_of_plain_kind( code_statement) !)
	
        _* "fail in basic_html_output_value" (! [[ fail ]]
	  %  ^filler_of_plain_kind( code_statement)
	!)
  ]
}
[[
]]
%  ^filler_of_plain_kind( block)
..

** __succeedblock_basic_html_output_value
{
  * comment "succeed block of basic_html_output_value"
  * instructions [
     _* "debug chunk at end of basic_html_output_value" (!
     [[ chunk "/*debug end basic_html_output_value*/\n"
       "  MOM_DEBUGPRINTF(web, \"basic_html_output_value successful end lkitm_webx=%s val1=%s depth=%d\", \n"
       "     mom_item_cstring(" lkitm_webx "), mom_output_gcstring(" val1 "), (int)" depth ");" ]]
       %  ^filler_of_plain_kind( code_statement) !)
        _* "succeed in basic_html_output_value" (! [[ success ]]
	  %  ^filler_of_plain_kind( code_statement)
	!)
  ]
}
[[
]]
%  ^filler_of_plain_kind( block)
..


////////////////


** indirect_html_item 
{
* comment "kind for indirect HTML items for basic_html_output_item"
}
..

** lkitm1
{
  * comment  "the locked item for the itm1"
  * type  locked_item }
 %  ^filler_of_plain_kind( variable)
 ..

** __constantclo_basic_html_output_value
{ * comment "the quoted ^basic_html_output_value () constant"
  * value ^basic_html_output_value ()
  * type value }
  % ^filler_of_plain_kind(constant)
..

..
** basic_html_output_item 
{
 * comment "internal function to output HTML in webxitm for item itm1 at given depth"
 * signature signature_2itm1int_to_void
 * constants { indirect_html_item  __constantclo_basic_html_output_value }
 * formals [ webxitm itm1 depth ]
 * closed [ ]
 * start _* = __start_block_basic_html_output_item
  (!
    {
      * comment  "start block of basic_web_output_item"
      * instructions [
        //////
        _* "if depth too big fail in basic_html_output_item" (!
        [[ if ^integer_greater_than(depth maximal_html_output_depth) __failblock_basic_html_output_item 
        ]]
          %  ^filler_of_plain_kind( code_statement)
        !)
	////
        _* "set lkitm_webx = webxitm" (! [[ set lkitm_webx webxitm ]]
	   %  ^filler_of_plain_kind( code_statement) !)
        //////
        _* "set lkitm1 = itm1" (! [[ set lkitm1 itm1 ]]
	   %  ^filler_of_plain_kind( code_statement) !)
	/////
        _* "if lkitm1 is of indirect_html_item kind, process it; in basic_html_output_item"
	(! [[ if ^item_has_kind(lkitm1 indirect_html_item) __block_process_output_indirect_html_item ]]
           % ^filler_of_plain_kind (code_statement) !)
        _* "other kinds for lkitm1 are output verbatim; in basic_html_output_item"
        (! [[ chunk "/*output verbatim html other kind of item */ mom_unsync_webexitem_fputs(" 
                    lkitm_webx ", mom_item_cstring(" lkitm1 "));"
           ]] % ^filler_of_plain_kind (code_statement) !)
      ]
    }
    %  ^filler_of_plain_kind( block)    
  !)
}
[[
]]
% ^append_function_to_closed_module(the_base_module)
..


** __block_process_output_indirect_html_item 
{
  * comment "block to process indirect html item in basic_html_output_item"
      * instructions [
      _* "set varlen = nbcomp(lkitm1); in basic_html_output_item"
      (! [[ set varlen ^unsync_item_components_count(lkitm1) ]]
           % ^filler_of_plain_kind (code_statement) !)
      _* "set varix = 0; in basic_html_output_item"
      (! [[ set varix 0 ]]
           % ^filler_of_plain_kind (code_statement) !)
      _* "jump block loop output_indirect_html_item"
      (! [[ jump __block_loop_output_indirect_html_item ]]
           % ^filler_of_plain_kind (code_statement) !)
      ]
}
  %  ^filler_of_plain_kind( block)  
..

** __block_loop_output_indirect_html_item 
{
  * comment "block to loop indirect html item in basic_html_output_item"
  * instructions [
      _* "if varix >= varlen jump success; in basic_html_output_item"
      (! [[ if ^integer_greater_than(varix varlen)  __endblock_basic_html_output_item ]]
           % ^filler_of_plain_kind (code_statement) !)
   _* "apply basic_html_output_value to lkitm_webx (varix-th component of lkitm1) (depth+1); in basic_html_output_item" (!
      [[ apply signature_1itm1val1int_to_void __constantclo_basic_html_output_value
            lkitm_webx  ^unsync_item_get_nth_component(lkitm1 varix) ^integer_add(depth 1)
      ]]
      % ^filler_of_plain_kind(code_statement) !)
   _* "increment varix; in basic_html_output_item"
      (! [[  set  varix  ^integer_add( varix  1) ]]
         %  ^filler_of_plain_kind( code_statement) !)
   _* "jump loop indirect html item; in basic_html_output_item"
      (! [[ jump __block_loop_output_indirect_html_item ]]
         %  ^filler_of_plain_kind( code_statement) !)
  ]
}
  %  ^filler_of_plain_kind( block)  
..

** __endblock_basic_html_output_item
{
  * comment "end block of basic_html_output_item"
  * instructions [
        _* "success in basic_html_output_item" (! [[ success ]]
	  %  ^filler_of_plain_kind( code_statement)
	!)
  ]
}
[[
]]
%  ^filler_of_plain_kind( block)
..

** __failblock_basic_html_output_item
{
  * comment "fail block of basic_html_output_item"
  * instructions [
        _* "fail in basic_html_output_item" (! [[ fail ]]
	  %  ^filler_of_plain_kind( code_statement)
	!)
  ]
}
[[
]]
%  ^filler_of_plain_kind( block)
..



////////////////////////////////////////////////////////////////

** basic_web_json
{
 * comment "function to handle basic web reply in JSON"
 * signature  signature_2itm2val_to_void
 * constants { }
 * formals [ webxitm reqmethitm restpathval sessval ]
 * closed [ getproc postproc ]
 * start _* = __start_block_basic_web_json
  (!
    {
      * comment "start block of basic_web_json"
      * instructions [
        /////
        _* "set lkitm_webx = webxitm" (! [[ set lkitm_webx webxitm ]]
	  %  ^filler_of_plain_kind( code_statement)
	!)
      ] // end of instructions from __start_block_basic_web_json
    }
    %  ^filler_of_plain_kind( block)
  !) // end __start_block_basic_web_json
}
[[
]]
% ^append_function_to_closed_module(the_base_module)
..


/// eof xtradraft.mom
