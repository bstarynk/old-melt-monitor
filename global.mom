/// *** generated file global.mom - DO NOT EDIT 
/// Copyright (C) 2015 Free Software Foundation, Inc. 
/// MONIMELT is a monitor for MELT - see http://gcc-melt.org/ 
/// This generated file global.mom is part of MONIMELT, part of GCC 
///
/// GCC is free software; you can redistribute it and/or modify 
/// it under the terms of the GNU General Public License as published by 
/// the Free Software Foundation; either version 3, or (at your option) 
/// any later version. 
///
///  GCC is distributed in the hope that it will be useful, 
///  but WITHOUT ANY WARRANTY; without even the implied warranty of 
///  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
///  GNU General Public License for more details. 
///  You should have received a copy of the GNU General Public License 
///  along with GCC; see the file COPYING3.   If not see 
///  <http://www.gnu.org/licenses/>. 
///


** apply0   ////// PREDEFINED
{
  * comment  "operation for application without result" }
 
..


** apply1   ////// PREDEFINED
{
  * comment  "operation for application with single result" }
 
..


** c_block   ////// PREDEFINED
{
  * comment  "kind of C code block" }
 
..


** c_code   ////// PREDEFINED
{
  * comment  "gives the C code for something" }
 
..


** c_code_generation   ////// PREDEFINED
{
  * comment  "kind of transient items for C code generation" }
 
..


** c_function_prefix   ////// PREDEFINED
{
  * comment  "gives the prefix of C functions in signatures" }
 
..


** c_instructions   ////// PREDEFINED
{
  * comment  "attribute giving the tuple of c_instructions inside a block"
 }
 
..


** c_module   ////// PREDEFINED
{
  * comment  "kind of C modules" }
 
..


** c_preparation   ////// PREDEFINED
{
  * comment  "in a C module, attribute giving the closure to prepare it, applied to the module and the code generator items"
 }
 
..


** c_type   ////// PREDEFINED
{
  * comment  "kind of C types"
  * dumped_item_emitter  ^emitter_of_plain_kind() }
 
..


** chunk   ////// PREDEFINED
{
  * comment  "operation for C code chunk" }
 
..


** comment   ////// PREDEFINED
{
  * comment  "to give comments in items." }
 
..


** double   ////// PREDEFINED
{
  * comment  "type for double" }
 
..


** dumped_item_emitter   ////// PREDEFINED
{
  * comment  "within a kind, gives the closure applied to all items of that kind giving its transformer."
 }
 
..


** dumped_item_scanner   ////// PREDEFINED
{
  * comment  "within a kind, gives the closure applied to all items of that kind to scan it."
 }
 
..


** emitter_of_function   ////// PREDEFINED
{
  * comment  "routine to emit C functions" }
 
  %  ^filler_of_function( signature_1itm_to_val)
 
..


** emitter_of_magic_attribute   ////// PREDEFINED
{
  * comment  "predefined routine to emit magic_attribute-s" }
 
  %  ^filler_of_function( signature_1itm_to_val)
 
..


** emitter_of_plain_kind   ////// PREDEFINED
{
  * comment  "routine to emit play kind items" }
 
  %  ^filler_of_function( signature_1itm_to_val)
 
..


** filler_of_function   ////// PREDEFINED
{
  * comment  "routine to fill loaded C functions" }
 
  %  ^filler_of_function( signature_1itm_to_void)
 
..


** filler_of_magic_attribute   ////// PREDEFINED
{
  * comment  "function to fill a magic attribute" }
 
  %  ^filler_of_function( signature_1itm_to_void)
 
..


** filler_of_plain_kind   ////// PREDEFINED
{
  * comment  "routine to fill plain kind items" }
 
  %  ^filler_of_function( signature_1itm_to_void)
 
..


** function_signature   ////// PREDEFINED
{
  * comment  "kind of function signatures"
  * dumped_item_emitter  ^emitter_of_plain_kind() }
 
..


** functions   ////// PREDEFINED
{
  * comment  "in a C module, attribute giving the set or tuple of functions, or a closure to compute them"
 }
 
..


** generate_c_module   ////// PREDEFINED
{
  * comment  "routine to generate a C module; returns the item on success, or an error message"
 }
 
  %  ^filler_of_function( signature_1itm_to_val)
 
..


** input_types   ////// PREDEFINED
{
  * comment  "give the tuple of input types inside signatures" }
 
..


** int_switch   ////// PREDEFINED
{
  * comment  "operation for switch on integer" }
 
..


** integer   ////// PREDEFINED
{
  * c_code  "intptr_t"
  * comment  "type for intptr_t" }
 
  %  ^filler_of_plain_kind( c_type)
 
..


** item   ////// PREDEFINED
{
  * c_code  "momitem_t*"
  * comment  "type for momitem_t*" }
 
  %  ^filler_of_plain_kind( c_type)
 
..


** item_switch   ////// PREDEFINED
{
  * comment  "operation for switch on item" }
 
..


** jump   ////// PREDEFINED
{
  * comment  "operation for jump instruction" }
 
..


** kind   ////// PREDEFINED
{
  * comment  "very magic pseudo attribute giving the kind of items" }
 
..


** magic_attribute   ////// PREDEFINED
{
  * comment  "kind of magic attributes"
  * dumped_item_emitter  ^emitter_of_magic_attribute()
  * dumped_item_scanner  ^scanner_of_magic_attribute() }
 
..


** output_types   ////// PREDEFINED
{
  * comment  "give the tuple of result types inside signatures" }
 
..


** scanner_of_magic_attribute   ////// PREDEFINED
{
  * comment  "predefined routine to scan magic_attribute-s" }
 
  %  ^filler_of_function( signature_1itm_to_void)
 
..


** set   ////// PREDEFINED
{
  * comment  "operation for assignment instruction" }
 
..


** signature_1itm_to_val   ////// PREDEFINED
{
  * c_function_prefix  "momfun_1itm_to_val"
  * comment  "signature for function of 1 item argument and 1 value result"
  * dumped_item_emitter  ^emitter_of_function()
  * input_types  [item]
  * output_types  [value] }
 
  %  ^filler_of_plain_kind( function_signature)
 
..


** signature_1itm_to_void   ////// PREDEFINED
{
  * c_function_prefix  "momfun_1itm_to_void"
  * comment  "signature for function of 1 item argument and no result"
  * dumped_item_emitter  ^emitter_of_function()
  * input_types  [item]
  * output_types  [] }
 
  %  ^filler_of_plain_kind( function_signature)
 
..


** signature_1val_to_val   ////// PREDEFINED
{
  * c_function_prefix  "momfun_1val_to_val"
  * comment  "signature for closures with one value argument and one value result"
  * dumped_item_emitter  ^emitter_of_function()
  * input_types  [value]
  * output_types  [value] }
 
  %  ^filler_of_plain_kind( function_signature)
 
..


** signature_1val_to_void   ////// PREDEFINED
{
  * c_function_prefix  "momfun_1val_to_void"
  * comment  "signature for closures with one value argument and no result"
  * dumped_item_emitter  ^emitter_of_function()
  * input_types  [value]
  * output_types  [] }
 
  %  ^filler_of_plain_kind( function_signature)
 
..


** signature_2itm1val_to_val   ////// PREDEFINED
{
  * c_function_prefix  "momfun_2itm1val_to_val"
  * comment  "signature of functions taking two items and a value and giving a value"
  * dumped_item_emitter  ^emitter_of_function()
  * input_types  [item item value]
  * output_types  [value] }
 
  %  ^filler_of_plain_kind( function_signature)
 
..


** signature_2itm1val_to_void   ////// PREDEFINED
{
  * c_function_prefix  "momfun_2itm1val_to_void"
  * comment  "signature of functions taking two items and a value and giving no result"
  * dumped_item_emitter  ^emitter_of_function()
  * input_types  [item item value]
  * output_types  [] }
 
  %  ^filler_of_plain_kind( function_signature)
 
..


** signature_2itm_to_val   ////// PREDEFINED
{
  * c_function_prefix  "momfun_2itm_to_val"
  * comment  "signature of functions taking two items and giving one value"
  * dumped_item_emitter  ^emitter_of_function()
  * input_types  [item item]
  * output_types  [value] }
 
  %  ^filler_of_plain_kind( function_signature)
 
..


** signature_2itm_to_void   ////// PREDEFINED
{
  * c_function_prefix  "momfun_2itm_to_void"
  * comment  "signature of functions taking two items giving no result"
  * input_types  [item item]
  * output_types  [] }
 
  %  ^filler_of_plain_kind( function_signature)
 
..


** signature_void_to_void   ////// PREDEFINED
{
  * c_function_prefix  "momfun_void_to_void"
  * comment  "signature for closures with no arguments and no result"
  * dumped_item_emitter  ^emitter_of_function()
  * input_types  []
  * output_types  [] }
 
  %  ^filler_of_plain_kind( function_signature)
 
..


** start   ////// PREDEFINED
{
  * comment  "attribute giving the starting attribute" }
 
..


** the_software   ////// PREDEFINED
{
  * comment  "describes the entire software system" }
 [[  emitter_of_magic_attribute  scanner_of_magic_attribute ]]
 
..


** value   ////// PREDEFINED
{
  * c_code  "momvalue_t"
  * comment  "type for momvalue_t" }
 
  %  ^filler_of_plain_kind( c_type)
 
..

//// end of global file global.mom
