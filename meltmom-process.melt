;;;  file meltmom-process.melt -*- Lisp -*-

;;;   Copyright (C)  2014 Free Software Foundation, Inc.
;;; MONIMELT is a monitor for MELT - see http://gcc-melt.org/
;;; This file is part of GCC.
;;;
;;; GCC is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3, or (at your option)
;;; any later version.
;;;
;;; GCC is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; You should have received a copy of the GNU General Public License
;;; along with GCC; see the file COPYING3.   If not see
;;; <http://www.gnu.org/licenses/>.

;;; this file is for the MELT 1.1.3 (or later) plugin for GCC
;;; to process the header file monimelt.h
;;; see http://gcc-melt.org/ for more

(module_is_gpl_compatible "GPLv3+")

(definstance monimelt_pragma_ok class_reference)

(defvar monimelt_types_list)
(setq monimelt_types_list (list))
(defvar monimelt_functions_list)
(setq monimelt_functions_list (list))
(defvar monimelt_tmp)
(setq monimelt_tmp (constant_box (melt_argument "monimelt-tmp")))
(debug "monimelt_tmp=" monimelt_tmp)
(defvar monimelt_service)
(setq monimelt_service
      (let ( (monimelt_socket (melt_argument "monimelt-socket"))
	     )
	(if monimelt_socket (constant_box monimelt_socket)
	  (string4out discr_string monimelt_tmp "_socket"))))
;; we need to usleep a bit to let the monitor warm up
(code_chunk startusleep_chk #{ /* meltmom-process $STARTUSLEEP_CHK */
	    usleep (200*1000);
	    }#)
(debug "monimelt_service=" monimelt_service)
(defun monimelt_enable_pragma_handler (ph)
  (debug "monimelt_enable_pragma_handler ph=" ph)
  (inform_at (pragma_lex) "MONIMELT enabling MELT")
  (set_ref monimelt_pragma_ok :true)
)

(defun monimelt_disable_pragma_handler (ph)
  (debug "monimelt_disable_pragma_handler ph=" ph)
  (set_ref monimelt_pragma_ok ())
)

(defun monimelt_attribute_handler (attr flaglist :tree tr_node tr_name tr_args) 
  (debug "monimelt_attribute_handler" " start attr=" attr
	 "; flaglist=" flaglist
	 ";\n tr_node=" tr_node
	 ";\n tr_name=" tr_name
	 ";\n tr_args=" tr_args)
  (return)
)

(defun monimelt_pre_genericize (decl)
  (if (null !monimelt_pragma_ok)
      (return))
  (debug "monimelt_pre_genericize" " decl=" decl)
  )

  
(defun monimelt_finish_decl (decl)
  (if (null !monimelt_pragma_ok)
      (return)) 
  (let ( (tdecl  (unbox :tree decl))
	 )
    ;;(debug "monimelt_finish_decl" " begin tdecl=" tdecl "\n\n")
    (match
     tdecl
     (?(tree_function_decl_named
	?(and ?tfuname ?(cstring_prefixed "mom_"))
	?tfunres)
       (debug  "monimelt_finish_decl" " function tdecl=" tdecl)
       (list_append monimelt_functions_list decl)
       )
     (?(tree_type_declaration
	;; caveat, many types start with mom without underscore
	?(and ?(tree_identifier ?(cstring_prefixed "mom")) ?tyname))
       (debug "monimelt_finish_decl" " typedecl tyname=" tyname 
	      ";\n.. tdecl=" tdecl "\n")
       (list_append monimelt_types_list decl)
       )
     (?(tree_record_type ?tr_record)
       (debug "monimelt_finish_decl" " record:" tr_record)
       )
     (?_
      ;; (debug "monimelt_finish_decl else tdecl=" tdecl)
      (void)
      )
     )
    )
  )

(defvar monimelt_dict_types)
(setq monimelt_dict_types (make_mapstring discr_map_strings 107))
(defun monimelt_declare_type (typev)
  (debug "monimelt_declare_type" " start typev=" typev)
  (let ( (tr_type (unbox :tree typev))
         )
    (debug "monimelt_declare_type" " tr_type=" tr_type)
    (match tr_type
           ( ?(and
               ?(tree_type_decl_with_name ?tr_decltype ?name ?uid)
               ?(tree_decl_at_source_location ?filepathv ?linum ?colnum))
              (debug "monimelt_declare_type" " name=" name "; tr_decltype=" tr_decltype
                     " linum=" linum)
              (let ( (linenumv (constant_box linum))
                     (typenamev (constant_box name))
                     (jparam (make_jsonobject discr_jsonobject
                                              'monimelt_name typenamev
                                              'monimelt_line linenumv))
                     )
                (debug "monimelt_declare_type" " typenamev=" typenamev "; typev=" typev)
                (mapstring_putstr monimelt_dict_types typenamev typev)
                (debug "monimelt_declare_type" " updated dict="  debug_more monimelt_dict_types
                       "\n.. jparam=" jparam)
                (multicall
                 (res :long time)
                 (do_blocking_jsonrpc2_call monimelt_service
                                            '"meltmom_declare_name" jparam 250)
                 (debug "monimelt_declare_type" " jsonrpc res=" res " time=" time))
                )
              )
       ;;-  ;;
       ;;-  ( ?(tree_type_decl ?tr_decltype ?tr_name ?tr_ctx ?tr_orig ?uid)
       ;;-     (debug "monimelt_declare_type" " ?- unlocated tr_name=" tr_name " tr_decltype=" tr_decltype
       ;;-            ";\n.. tr_ctx=" tr_ctx ";\n.. tr_orig=" tr_orig
       ;;-            ";\n.. uid=" uid))
       ;;-  ;;
       ;;-  ( ?(tree_type_declaration ?tr_insidetype)
       ;;-     (debug "monimelt_declare_type" " ?- tr_insidetype=" tr_insidetype)
       ;;-     )
       ;;-  ;;
       ;;-  ( ?(and
       ;;-      ?(tree_enumeral_type ?tr_entype ?tr_enmin ?tr_enmax ?tr_ensize ?tr_envalues)
       ;;-      ?(tree_decl_at_source_location ?filepathv ?linum ?colnum))
       ;;-     (debug "monimelt_declare_type" " ?- located-enumeral linum=" linum "; tr_entype=" tr_entype
       ;;-            " tr_envalues=" tr_envalues)
       ;;-     )
       ;;-  ;;
       ;;-  ( ?(tree_enumeral_type ?tr_entype ?tr_enmin ?tr_enmax ?tr_ensize ?tr_envalues)
       ;;-     (debug "monimelt_declare_type" " ?- plain-enumeral tr_entype=" tr_entype
       ;;-            " tr_envalues=" tr_envalues)
       ;;-     )
       ;;-  ;;
           ( ?_
             (debug  "monimelt_declare_type" " @@strange tr_type=" tr_type
                     "\n.. typev=" typev)
             (error_at typev "monimelt unexpected type $1" tr_type)
             )
           )
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun monimelt_declare_function (funcv)
  (debug "monimelt_declare_function " "start funcv=" funcv)
  (let ( (tr_func (unbox :tree funcv))
	 )
    (debug "monimelt_declare_function" " tr_func=" tr_func)
    (match
     tr_func
     ( ?(and
	 ?(tree_function_decl_named ?funame ?funres)
	 ?(tree_decl_at_source_location ?filepathv ?linum ?colnum))
	(debug "monimelt_declare_function" " funame=" funame
	       " linum=" linum)
	(let ( (linenumv (constant_box linum))
	       (funcnamev (constant_box funame))
	       (jparam (make_jsonobject discr_jsonobject
					'monimelt_name funcnamev
					'monimelt_line linenumv))
	       )
	  (debug "monimelt_declare_function" " jparam=" jparam)
	  (multicall
	   (res :long time)
	   (do_blocking_jsonrpc2_call monimelt_service
				      '"meltmom_declare_name" jparam 350)
	    (debug "monimelt_declare_function" " jsonrpc res=" res " time=" time))
	  )
	)
     ( ?_
       (debug "monimelt_declare_function" " @@strange tr_func=" tr_func "\n.. funcv=" funcv)
       (error_at funcv "monimelt unexpected function $1" tr_func)
       )
     )
    )
  )

(defvar monimelt_dict_aggregates)
(setq monimelt_dict_aggregates (make_mapstring discr_map_strings 89))

(defun monimelt_register_aggregate_type (namev typev)
  (let ( (rectypev (mapstring_getstr monimelt_dict_aggregates namev))
	 )
    (debug "monimelt_register_aggregate_type" " namev=" namev " typev=" typev " rectypev=" rectypev)
    (assert_msg "check namev" (is_string namev) namev)
    (assert_msg "check dictaggr" (is_mapstring monimelt_dict_aggregates) monimelt_dict_aggregates)
    (shortbacktrace_dbg "monimelt_register_aggregate_type" 10)
    (cond ( (null rectypev)
	    (mapstring_putstr monimelt_dict_aggregates namev typev)
	    (debug "monimelt_register_aggregate_type" " updated dictaggr " monimelt_dict_aggregates)
	    (void)
	    )
	  ( (==t (unbox :tree typev) (unbox :tree rectypev))
	    (debug "monimelt_register_aggregate_type" " same unboxed typev & rectypev="
		   (unbox :tree typev))
	    (void)
	    )
	  ( (tree_types_compatible_p (unbox :tree typev) (unbox :tree rectypev))
	    (debug "monimelt_register_aggregate_type" " compatible typev=" typev ";\n.. with rectypev=" rectypev)
	    (void)
	    )
	  (:else
	   (debug "monimelt_register_aggregate_type" " erroring typev=" typev
		  ";\n.. unboxed rectypev=" (unbox :tree rectypev)
		  ";\n.. namev=" namev "\n")
	   (shortbacktrace_dbg "monimelt_register_aggregate_type error" 15)
	   (error_at typev "incorrect MELTMOM aggregate $1 same as $2 named $3"
		     typev (unbox :tree rectypev) namev)
	   ))
  ))


;;;;;;;;;;;;;;;;
(defun monimelt_json_for_type (typev)
  (debug "monimelt_json_for_type" " start typev=" typev)
  (assert_msg "monimelt_json_for_type check nbcall"
	      (expr_chunk jstycount_chk :long
                          #{ ({static long counter_$JSTYCOUNT_CHK    ;
                               counter_$JSTYCOUNT_CHK++ ;
                               counter_$JSTYCOUNT_CHK < 30000 ;
                                      })
			  }#))
  (let ( (tr_type (unbox :tree typev))
	 )
    (assert_msg "monimelt_json_for_type check tr_type" tr_type typev)
    (debug "monimelt_json_for_type" " tr_type=" tr_type)
    (match tr_type
	   ;;
	   (?(tree_char_type_node)
	     (debug  "monimelt_json_for_type" " char")
	     (return '"char")
	     )
	   ;;
	   (?(tree_boolean_type_node)
	     (debug  "monimelt_json_for_type" " bool")
	     (return '"bool")
	     )
	   ;;
	   (?(tree_void_type_node)
	     (debug  "monimelt_json_for_type" " void")
	     (return '"void")
	     )
	   ;;
	   (?(tree_double_type_node)
	     (debug  "monimelt_json_for_type" " double")
	     (return '"double")
	     )
	   ;;
	   (?(tree_float_type_node)
	     (debug  "monimelt_json_for_type" " float")
	     (return '"float")
	     )
	   ;;
	   (?(tree_signed_char_type_node)
	     (debug  "monimelt_json_for_type" " signed char")
	     (return '"signed_char")
	     )
	   ;;
	   (?(tree_unsigned_char_type_node)
	     (debug  "monimelt_json_for_type" " unsigned char")
	     (return '"unsigned_char")
	     )
	   ;;
	   (?(tree_short_integer_type_node)
	     (debug  "monimelt_json_for_type" " short")
	     (return '"short")
	     )
	   ;;
	   (?(tree_short_unsigned_type_node)
	     (debug  "monimelt_json_for_type" " unsigned short")
	     (return '"unsigned_short")
	     )
	   ;;
	   (?(tree_integer_type_node)
	     (debug  "monimelt_json_for_type" " int")
	     (return '"int")
	     )
	   ;;
	   (?(tree_va_list_type_node)
	     (debug  "monimelt_json_for_type" " va_list")
	     (return '"va_list")
	     )
	   ;;
	   (?(tree_unsigned_type_node)
	     (debug  "monimelt_json_for_type" " unsigned")
	     (return '"unsigned")
	     )
	   ;;
	   (?(tree_long_integer_type_node)
	     (debug  "monimelt_json_for_type" " long")
	     (return '"long")
	     )
	   ;;
	   (?(tree_long_unsigned_type_node)
	     (debug  "monimelt_json_for_type" " unsigned long")
	     (return '"unsigned_long")
	     )
	   ;;
	   (?(tree_size_type_node)
	     (debug  "monimelt_json_for_type" " size_t")
	     (return '"size_t")
	     )
	   ;;
	   (?(tree_type_decl ?(tree_va_list_type_node) ?tnam ?tr_ctx ?tr_orig ?uid)
	     (debug "monimelt_json_for_type" " typvalist tnam=" tnam
		    " tr_ctx=" tr_ctx " tr_orig=" tr_orig " uid=" uid)
	     (return '"va_list"))
	   ;;
	   (?(tree_type_decl ?tr_dcltype ?(and ?tr_name ?(tree_identifier ?(cstring_same "__va_list_tag")))
			     ?tr_ctx ?tr_orig ?uid)
	     (debug "monimelt_json_for_type" " valisttypedecl tr_dcltype=" tr_dcltype "\n.. tr_name=" tr_name
		    ";\n.. tr_ctx=" tr_ctx
		    ";\n.. tr_orig=" tr_orig		    
		    ";\n.. uid=" uid)
	     (return '"va_list"))
	   ;;
	   (?(tree_type_decl ?tr_dcltype ?(and ?tr_name ?(tree_identifier ?nameid))
			     ?tr_ctx ?tr_orig ?uid)
	     (debug "monimelt_json_for_type" " typedecl tr_dcltype=" tr_dcltype "\n.. tr_name=" tr_name
		    ";\n.. tr_ctx=" tr_ctx
		    ";\n.. tr_orig=" tr_orig		    
		    ";\n.. uid=" uid
		    ";\n.. nameid=" nameid)
	     (let ( (namev (constant_box nameid))
		    (meltypev (mapstring_getstr monimelt_dict_types namev))
		    (jres (if meltypev (make_jsonobject discr_jsonobject
							'monimelt_type namev)
			    namev))
		    )
	       (debug "monimelt_json_for_type" " typedecl jres=" jres)
	       (return jres)))
	   ;;
	   (?(tree_union_type ?(and ?tr_uniname
				    ?(tree_identifier  ?(and
							 ?(cstring_prefixed "mom")
							 ?uninamstr)))
			      )
	     (let ( (jname (constant_box uninamstr))
		    (jres (make_jsonobject discr_jsonobject
					   'mom_union jname))
		    )
	       (debug "monimelt_json_for_type" " momunion tr_uniname=" tr_uniname
		      " jres=" jres)
	       (monimelt_register_aggregate_type jname typev)
	       (return jres)
	       )
	     )
	   ;;
	   (?(tree_union_type ?tr_union)
	     (debug "monimelt_json_for_type" " union tr_union=" tr_union)
	     (let ( (junion (monimelt_json_for_type (constant_box tr_union)))
		    (jres (make_jsonobject discr_jsonobject
					   'mom_union junion))
		    )
	       (debug "monimelt_json_for_type" " union jres=" jres)
	       (return jres)
	       ))
	   ;;
	   (?(tree_record_type ?(tree_va_list_type_node))
	     (let ( (jres '"va_list")
		    )
	       (debug "monimelt_json_for_type" " record+valist jres=" jres)
	       (return jres)))  
	   ;;
	   (?(tree_record_type  ?(tree_identifier ?(cstring_same "__va_list_tag")))
	     (let ( (jres '"va_list")
		    )
	       (debug "monimelt_json_for_type" " record-valist jres=" jres)
	       (return jres)))
	   ;;
	   (?(tree_record_type ?(and ?tr_recname
				     ?(tree_identifier
				       ?(and ?(cstring_prefixed "mom")
					     ?recnamestr)))
			       )
	     (let ( (jname (constant_box recnamestr))
		    (jres (make_jsonobject discr_jsonobject
					   'mom_struct jname))
		    )
	       (monimelt_register_aggregate_type jname typev)
	       (debug "monimelt_json_for_type" " momrecord tr_recname=" tr_recname " jres=" jres)
	       (return jres)
	       )
	     )
	   ;;
	   (?(tree_record_type ?(and ?tr_recname
				     ?(tree_identifier ?(cstring_same "__va_list_tag"))))
	     (let ( (jres '"va_list")
		    )
	       (debug "monimelt_json_for_type" " record-named-valist jres=" jres " tr_recname=" tr_recname)
	       (return jres)))	     
	   ;;
	   (?(tree_record_type ?tr_record)
	     (debug "monimelt_json_for_type" " record tr_record=" tr_record)
	     (let ( (jrecord (monimelt_json_for_type (constant_box tr_record)))
		    (jres (make_jsonobject discr_jsonobject
					   'record jrecord))
		    )
	       (debug "monimelt_json_for_type" " record jres=" jres)
	       (return jres)
	       ))
	   ;;
	   (?(tree_array_type ?tr_arrelemtype ?(tree_integer_type ?tr_intype ?minv ?maxv ?tr_size))
	     (debug "monimelt_json_for_type" " bounded array tr_arrelemtype=" tr_arrelemtype
		    "\n.. minv=" minv " maxv=" maxv)
	     (let ( (jelemtype (monimelt_json_for_type (constant_box tr_arrelemtype)))
		    (jres (make_jsonobject discr_jsonobject
					   'array jelemtype
					   'min minv
					   'max maxv))
		    )
	       (debug "monimelt_json_for_type" " bounded array jres=" jres)
	       (return jres)
	       ))
	   ;;
	   ;;
	   (?(tree_array_type ?tr_arrelemtype ?tr_arrdomaintype)
	     (debug "monimelt_json_for_type" " array tr_arrelemtype=" tr_arrelemtype
		    "\n.. tr_arrdomaintype=" tr_arrdomaintype)
	     (let ( (jelemtype (monimelt_json_for_type (constant_box tr_arrelemtype)))
		    (jres (make_jsonobject discr_jsonobject
					   'array jelemtype))
		    )
	       (debug "monimelt_json_for_type" " general array jres=" jres)
	       (return jres)
	       ))
	   ;;
	   (?(tree_pointer_type ?tr_pointedtype)
	     (debug "monimelt_json_for_type" " pointer tr_pointedtype=" tr_pointedtype)
	     (let ( (jpointedtype (monimelt_json_for_type (constant_box tr_pointedtype)))
		    (jres (make_jsonobject discr_jsonobject
					   'pointer jpointedtype))
		    )
	       (debug "monimelt_json_for_type" " pointertype jres=" jres)
	       (return jres)
	       ))
	   ;;
	   (?(tree_integer_type ?tr_intype ?minv ?maxv ?tr_size)
	     (debug "monimelt_json_for_type" " integertype minv=" minv " maxv=" maxv
		    " tr_size=" tr_size)
	     (let (
		   (jintype (monimelt_json_for_type (constant_box tr_intype)))
		   (jres (make_jsonobject discr_jsonobject
					  'integer jintype
					  'min minv
					  'max maxv
					  )
			 ) 
		   )
	       (debug "monimelt_json_for_type" " integertype jres=" jres)
	       (return jres)
	       ))
	   ;;
	   ( ?(tree_enumeral_type ?(and ?tr_entype ?(tree_identifier ?enumstr)) ?tr_enmin ?tr_enmax ?tr_ensize 
				  ?(and ?tr_envalues
					?(tree_list ?trvalen ?trpurpose ?trchain)))
	      (debug "monimelt_json_for_type" " enumeraltype tr_entype=" tr_entype
		     "\n.. enumstr=" enumstr
		     "\n.. tr_envalues=" tr_envalues
		     "\n.. tr_enmin=" tr_enmin "\n.. tr_enmax=" tr_enmax
		     "\n.. tr_ensize=" tr_ensize
		     "\n.. trvalen=" trvalen "\n.. trpurpose=" trpurpose
		     "\n.. trchain=" trchain)
;;; bof???
	      (let ( (tupenum (tree_chain_to_tuple discr_multiple trchain))
		     (tupurp (tree_chain_to_tuple discr_multiple trpurpose))
		     (tupenval (tree_chain_to_tuple discr_multiple tr_envalues))
		     (jres (make_jsonobject discr_jsonobject
					    'enum (constant_box enumstr)
					    ))
		     )
		(debug "monimelt_json_for_type" " enumstr=" enumstr "; tupenum=" tupenum
		       "\n.. for typev=" typev "\n.. trchain=" trchain
		       "\n.. tupurp=" tupurp
		       "\n.. tupenval=" tupenval
		       "\n.. jres=" jres)
		(return jres)
		)
	      )
	   ;;
	   ( ?(tree_enumeral_type  ?(and ?tr_entype ?(tree_type_decl ?tr_srctype ?(tree_identifier ?tyidstr) ?tr_ctx ?tr_orig ?uid))
				   ?tr_enmin ?tr_enmax ?tr_ensize 
				   ?tr_envalues)
	      (debug "monimelt_json_for_type" " enumeraltype.bis"
		     "\n.. tr_entype=" tr_entype
		     "\n.. tyidstr=" tyidstr
		     "\n.. tr_envalues=" tr_envalues
		     "\n.. tr_enmin=" tr_enmin "\n.. tr_enmax=" tr_enmax
		     "\n.. tr_ensize=" tr_ensize)
	      (let ( 
		     (jres  (constant_box tyidstr))
		     )
		(debug "monimelt_json_for_type" " enum gives jres=" jres)
		(return jres)
		)
	      )
	   ;;
	   ( ?(tree_function_type  ?tr_ftype ?tr_argsty)
	      (debug "monimelt_json_for_type" " functiontype tr_ftype=" tr_ftype
		     " tr_argsty=" tr_argsty
		     "\n.. chaintup=" (tree_chain_to_tuple discr_multiple tr_argsty))
	      )
	   ;;
	   (?_
	    (debug "monimelt_json_for_type " "@@strange tr_type=" tr_type)
	    (assert_msg "monimelt_json_for_type unexpected tr_type" () (constant_box tr_type))
	    (void)))
    ))



(defun monimelt_declare_aggregate_field (aggnamev fieldv :long ix)
  (debug "monimelt_declare_aggregate_field" " aggnamev=" aggnamev
	 " fieldv=" fieldv "\n.. ix=" ix)
  (let ( (tr_field (unbox :tree fieldv))
	 )
    (debug "monimelt_declare_aggregate_field" " tr_field=" tr_field)
    (match tr_field
	   (?(and
	      ?(tree_field_decl ?(tree_identifier ?fldnamestr) ?tr_fldtype)
	      ?(tree_decl_at_source_location ?filepathv ?linum ?colnum))
	     (debug "monimelt_declare_aggregate_field "
		    " fldnamestr=" fldnamestr
		    " tr_fldtype=" tr_fldtype "\n.. linum=" linum)
	     (let ( (jfldtype (monimelt_json_for_type (constant_box tr_fldtype)))
		    )
	       (debug "monimelt_declare_aggregate_field" " fldnamestr=" fldnamestr
		      " jfldtype=" jfldtype)
	       (void)))
	   (?(and
	      ?(tree_field_decl ?tr_fname ?tr_fldtype)
	      ?(tree_decl_at_source_location ?filepathv ?linum ?colnum))
	     (debug "monimelt_declare_aggregate_field" " positioned field tr_fname=" tr_fname
		    " tr_fldtype=" tr_fldtype
		    " linum=" linum)
	     (void))
	   (?(tree_field_decl ?tr_fname ?tr_fldtype)
	     (debug "monimelt_declare_aggregate_field" " unpositioned field tr_fname=" tr_fname
		    " tr_fldtype=" tr_fldtype)
	     (void))
	   (?_
	    (debug "monimelt_declare_aggregate_field" " @@strange tr_field=" tr_field)
	    (assert_msg "impossible tr_field" () tr_field)
	    (void)))
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun monimelt_fill_type (typev)
  (debug "monimelt_fill_type" " start typev=" typev)
  (let ( (tr_type (unbox :tree typev))
	 )
    (debug "monimelt_fill_type" " tr_type=" tr_type)
    ;;
    (match
     tr_type
     ( ;;old ?(tree_type_declaration ?(tree_identifier ?tyidstr))
      ?(tree_type_decl ?tr_srctype ?(tree_identifier ?tyidstr) ?tr_ctx ?tr_orig ?uid)
       ;;
       (let ( (jtype (monimelt_json_for_type (constant_box tr_srctype)))
	      )
	 (debug "monimelt_fill_type " " jtype=" jtype "\n... for typev=" typev
		"\n.. tr_srctype=" tr_srctype)
	 )
    ;;
      (let ( 
	    ;;old (tr_srctype (tree_type tr_type))
	    )
	(debug "monimelt_fill_type" " tr_srctype=" tr_srctype " tyidstr=" tyidstr 
	       "\n.. tr_ctx=" tr_ctx
	       "\n.. tr_orig=" tr_orig
	       "\n.. uid=" uid)
	(match
	 tr_srctype
	 ( ?(tree_type_decl ?tr_dcltype ?tr_name ?tr_ctx ?tr_orig ?uid)
	    (debug "monimelt_fill_type" " typedecl start tr_name=" tr_name
		   " uid=" uid
		   "; tr_dcltype=" tr_dcltype
		   ";\n.. tr_ctx=" tr_ctx
		   ";\n.. tr_orig=" tr_orig
		   "\n")
	    (monimelt_fill_type (constant_box tr_dcltype))
	    (debug "monimelt_fill_type" " srcty typedecl done tr_name=" tr_name)
	    )
	 ( ?(tree_integer_type ?tr_basetype ?minv ?maxv ?tr_size)
	    (debug "monimelt_fill_type" " srcty integral tr_basetype=" tr_basetype
		   " minv=" minv " maxv=" maxv " tr_size=" tr_size))
	 ( ?(tree_record_type_with_fields ?tr_recname ?tr_recfields)
	    (debug "monimelt_fill_type" " srcty record tr_recname=" tr_recname
		   " tr_recfields=" tr_recfields)
	    (let ( (fieldstup (tree_chain_to_tuple discr_multiple tr_recfields))
		   )
	      (debug "monimelt_fill_type" " fieldstup=" fieldstup)
	      (foreach_in_multiple
	       (fieldstup)
	       (curfieldv :long ix)
	       (debug "monimelt_fill_type" " curfieldv=" curfieldv "; ix=" ix)
	       (monimelt_declare_aggregate_field (constant_box tyidstr) curfieldv ix)
	       )
	      )
	    )
	 ( ?(tree_union_type_with_fields ?tr_uniname ?tr_unifields)
	    (debug "monimelt_fill_type" " srcty union tr_uniname=" tr_uniname
		   " tr_unifields=" tr_unifields)
	    )
	 ( ?(tree_enumeral_type ?tr_entype ?tr_enmin ?tr_enmax ?tr_ensize ?tr_envalues
				)
	    (debug "monimelt_fill_type" " srcty enumeral tr_entype=" tr_entype
		   "\n.. tr_envalues=" tr_envalues)
	    )
	 ( ?(tree_function_type ?tr_ftype ?tr_argsty)
	    (debug "monimelt_fill_type" " srcty functionty tr_ftype=" tr_ftype "\n.. tr_argsty=" tr_argsty)
	    )
	 ( ?_
	   (debug "monimelt_fill_type" " @@strange srcty tr_srctype=" tr_srctype
		  "\n.. typev=" typev)
	   (warning_at typev "MONIMELT strange type $1 cant be filled for $2"
		       tr_srctype tr_type)
	   )
	 )
	)
      )
     (?_
      (debug "monimelt_fill_type" " @@strange typev=" typev)
      (error_at typev "MONIMELT unexpected type to fill $1" typev)
      (assert_msg "unexpected typev" () typev)
      ))
    )
  )



(defun monimelt_declare_aggregation (agg nam)
  (debug "monimelt_declare_aggregation" " start agg=" agg "; nam=" nam)
  (let ( (tr_agg (unbox :tree agg))
	 )
    (debug "monimelt_declare_aggregation nam=" nam "\n.. tr_agg=" tr_agg)
    (match
     tr_agg
     ( ?(and
	 ?(tree_decl_at_source_location ?filepathv ?linum ?colnum)
	 ?(tree_union_type_with_fields ?tr_uniname ?tr_unifields)
	 )
	(let ( (fieldstup (tree_chain_to_tuple discr_multiple tr_unifields))
	       )
	  (debug "monimelt_declare_aggregation" " union tr_uniname=" tr_uniname
		 " linum=" linum ";\n fieldstup=" fieldstup)
	  (foreach_in_multiple
	   (fieldstup)
	   (curfld :long fix) 
	   (debug "monimelt_declare_aggregation" "unionfield fix#" fix " curfld=" curfld)
	   (monimelt_declare_aggregate_field (constant_box tr_uniname) curfld fix)
	   )
	  ))
     ( ?(and
	 ?(tree_decl_at_source_location ?filepathv ?linum ?colnum)
	 ?(tree_record_type_with_fields ?tr_recname ?tr_recfields)
	 )
	(let ( (fieldstup (tree_chain_to_tuple discr_multiple tr_recfields))
	       )
	  (debug "monimelt_declare_aggregation" " struct tr_recname=" tr_recname
		 " linum=" linum ";\n fieldstup=" fieldstup)
	  (foreach_in_multiple
	   (fieldstup)
	   (curfld :long fix) 
	   (debug "monimelt_declare_aggregation" "structfield fix#" fix " curfld=" curfld)
	   (monimelt_declare_aggregate_field (constant_box tr_recname) curfld fix)
	   )
	  ))
     ( ?(tree_decl_at_source_location ?filepathv ?linum ?colnum)
	(debug "monimelt_declare_aggregation" " strange located decl tr_agg=" tr_agg
	       " linum=" linum)
	(error_at agg "MONIMELT strange located aggregation $1" tr_agg)
	)
     ( ?(tree_union_type_with_fields ?tr_uniname ?tr_unifields)
	(let ( (fieldstup (tree_chain_to_tuple discr_multiple tr_unifields))
	       )
	  (debug "monimelt_declare_aggregation" " nonpositioned union tr_uniname=" tr_uniname
		 ";\n fieldstup=" fieldstup ";\n.. agg=" agg)
	  (foreach_in_multiple
	   (fieldstup)
	   (curfld :long fix) 
	   (debug "monimelt_declare_aggregation" "unionfield fix#" fix " curfld=" curfld)
	   (monimelt_declare_aggregate_field (constant_box tr_uniname) curfld fix)
	   )
	  ))
     ( ?(tree_record_type_with_fields ?tr_recname ?tr_recfields)
	(let ( (fieldstup (tree_chain_to_tuple discr_multiple tr_recfields))
	       )
	  (debug "monimelt_declare_aggregation" " nonpositioned struct tr_recname=" tr_recname
		 ";\n fieldstup=" fieldstup ";\n.. agg=" agg)
	  (foreach_in_multiple
	   (fieldstup)
	   (curfld :long fix) 
	   (debug "monimelt_declare_aggregation" "structfield fix#" fix " curfld=" curfld)
	   (monimelt_declare_aggregate_field (constant_box tr_recname) curfld fix)
	   )
	  ))
     (?_
      (debug "monimelt_declare_aggregation" " @@strange tr_agg=" tr_agg)
      (shortbacktrace_dbg "monimelt_declare_aggregation @strange" 12)
      (error_at agg "MONIMELT unexpected aggregation $1" tr_agg)
      )
     )))



;;; for function signature
(defun monimelt_function_signature (funv)
  (debug "monimelt_function_signature" " funv=" funv)
  (let ( (trfun (unbox :tree funv))
	 )
    (debug "monimelt_function_signature" " trfun=" trfun)
    (match trfun
	   ( ?(tree_function_decl_full
	       ?(and ?tname ?(tree_identifier ?namstr))
	       ?targs
	       ?(and ?tftype
		     ?(tree_function_type ?trsigtype ?trsigargs))
	       ?tresult ?tctxt ?builtincode)
	      (debug "monimelt_function_signature"
		     " tname=" tname
		     "\n.. targs=" targs
		     "\n.. tftype=" tftype
		     "\n.. tresult=" tresult
		     "\n.. trsigtype=" trsigtype
		     "\n.. trsigargs=" trsigargs
		     "\n.. tctxt=" tctxt
		     "\n")
	      (let (
		    (jname (constant_box namstr))
		    (jsigtype (monimelt_json_for_type (constant_box trsigtype)))
		    (ljargs (make_list discr_list))
		    )
		(debug "monimelt_function_signature" " jsigtype=" jsigtype)
		(foreach_chain_value_purpose_in_tree_list
		 (trsigargs)
		 (:tree tchain tval tpurp)
		 (debug "monimelt_function_signature"
			" tval=" tval "\n.. tpurp=" tpurp)
		 (let ( (curargv (constant_box tval))
			(curjtype (monimelt_json_for_type curargv))
			)
		   (debug "monimelt_function_signature" " curjtype=" curjtype)
		   (list_append ljargs curjtype)
		   ))
		(debug "monimelt_function_signature" " ljargs=" ljargs)
		(let ( (jargtup (list_to_multiple ljargs))
		       (jparam (make_jsonobject discr_jsonobject
						'monimelt_name jname
						'monimelt_args jargtup
						'monimelt_result jsigtype))
		       )
		  (debug "monimelt_function_signature" " jparam=" jparam)
		  (multicall
		   (res :long time)
		   (do_blocking_jsonrpc2_call monimelt_service
					      '"meltmom_define_function" jparam 450)
		   (debug "monimelt_function_signature" " jsonrpc res=" res " time=" time))
		  )
		)
	      (void)
	      )
	   (?_
	    (error_at funv "MONIMELT unexpected function $1" funv)))
    ))

;;this function should probably do the JSONRPC calls
(defun monimelt_finish_unit (arg)
  (debug "monimelt_finish_unit" " arg=" arg
	 ";\n\n\n*** monimelt_types_list=" monimelt_types_list
	 ";\n\n\n*** monimelt_functions_list=" monimelt_functions_list
	 ";\n\n\n*** monimelt_dict_aggregates=" monimelt_dict_aggregates
	 ";\n\n\n*** monimelt_dict_types=" monimelt_dict_types
	 "\n\n\n\n")
  ;;
  (debug "monimelt_finish_unit" " declaring " (list_length monimelt_types_list) " types")
  (each_component_in_list
   monimelt_types_list
   ctype
   (monimelt_declare_type ctype))
  ;;
  (debug "monimelt_finish_unit" " declaring " (list_length monimelt_functions_list) " functions")
  (each_component_in_list
   monimelt_functions_list
   cfunc
   (monimelt_declare_function cfunc))
  ;;
  (debug "monimelt_finish_unit" " filling " (list_length monimelt_types_list) " types")
  (each_component_in_list
   monimelt_types_list
   ctype
  ;;
   (debug "monimelt_finish_unit" " filltype " ctype)
   (monimelt_fill_type ctype))
  ;;
  ;; aggregates should be declared after filling the types
  (debug "monimelt_finish_unit" " declaring aggregates from " monimelt_dict_aggregates)
  ;; first, predeclare the names
  (foreach_in_mapstring
   (monimelt_dict_aggregates)
   (curname curagg)
   (debug "monimelt_finish_unit" " aggregate curname=" curname)
   (let ( (jparam (make_jsonobject discr_jsonobject
				   'monimelt_name curname))
	  )
     (debug "monimelt_finish_unit aggregate jparam=" jparam)
     (multicall
      (res :long time)
      (do_blocking_jsonrpc2_call monimelt_service
				 '"meltmom_declare_name" jparam 250)
       (debug "monimelt_finish_unite" " aggregate jsonrpc res=" res " time=" time))
     ))
  ;; then declare the aggregation
  (foreach_in_mapstring
   (monimelt_dict_aggregates)
   (curname curagg)
   (debug "monimelt_finish_unit" " aggregate curname=" curname " curagg=" curagg)
   (monimelt_declare_aggregation curagg curname)
   )
  ;; define the function's signature
  (each_component_in_list
   monimelt_functions_list
   cfunc
   (monimelt_function_signature cfunc))
  ;;
  ;; final dump
  (multicall
   (momdump :long dumptime)
   (do_blocking_jsonrpc2_call monimelt_service '"dump" :true 7550)
   (debug "monimelt_finish_unit" " final momdump=" momdump ";\n.. dumptime=" dumptime)
   (when (null momdump)
     (error_at () "failed to do final Monimelt dump on service $1" monimelt_service)
     (return))
   )
  )


(defun processmonimelt_docmd (cmd moduldata)
  (debug "processmonimelt_docmd start " cmd)
  (debug "processmonimelt_docmd monimelt_service=" monimelt_service)
  (let ( (momstatus (do_blocking_jsonrpc2_call monimelt_service '"state" '1 660))
	 (at (instance class_gcc_attribute
		       :named_name '"meltmom"
		       :gccattr_data (tuple 'some-data)
		       :gccattr_handler monimelt_attribute_handler))
	 )
    (debug "processmonimelt_docmd" " initial momstatus=" momstatus
	   "\n.. at=" at)
    (when (null momstatus)
      (error_at () "failed to get Monimelt initial state on service $1" monimelt_service)
      (return))
    (register_expanded_pragma 'monimelt 'enable
			      monimelt_enable_pragma_handler 
			      :true)
    (register_expanded_pragma 'monimelt 'disable
			      monimelt_disable_pragma_handler 
			      ())
    (register_gcc_attribute at :min_length 1)
    (register_finish_decl_first  monimelt_finish_decl)
    (register_pre_genericize_first monimelt_pre_genericize)
    (at_finish_unit_first monimelt_finish_unit)
  
    (debug "processmonimelt_docmd end " cmd)
    (inform_at () "done MELT processing of monimelt.h")
    ;; at last
    (return :true)
    ))


(definstance process_monimelt_header_mode
  class_melt_mode
  :named_name '"process_monimelt_header"
  :meltmode_help '"process the monimelt.h header file and send some information about it to monimelt using JSONRPC"
  :meltmode_fun processmonimelt_docmd
)
(install_melt_mode process_monimelt_header_mode)
;; eof meltmom-process.melt 
