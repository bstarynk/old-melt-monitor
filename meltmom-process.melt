;;;  file meltmom-process.melt -*- Lisp -*-

;;;   Copyright (C)  2014 Free Software Foundation, Inc.
;;; MONIMELT is a monitor for MELT - see http://gcc-melt.org/
;;; This file is part of GCC.
;;;
;;; GCC is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3, or (at your option)
;;; any later version.
;;;
;;; GCC is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; You should have received a copy of the GNU General Public License
;;; along with GCC; see the file COPYING3.   If not see
;;; <http://www.gnu.org/licenses/>.

;;; this file is for the MELT 1.1.2 (or later) plugin for GCC
;;; to process the header file monimelt.h
;;; see http://gcc-melt.org/ for more

(module_is_gpl_compatible "GPLv3+")

(definstance monimelt_pragma_ok class_reference)

(defvar monimelt_types_list)
(setq monimelt_types_list (list))
(defvar monimelt_functions_list)
(setq monimelt_functions_list (list))
(defvar monimelt_tmp)
(setq monimelt_tmp (constant_box (melt_argument "monimelt-tmp")))
(debug "monimelt_tmp=" monimelt_tmp)
(defvar monimelt_service)
(setq monimelt_service
      (let ( (monimelt_socket (melt_argument "monimelt-socket"))
	     )
	(if monimelt_socket (constant_box monimelt_socket)
	  (string4out discr_string monimelt_tmp "_socket"))))
(debug "monimelt_service=" monimelt_service)

(defun monimelt_enable_pragma_handler (ph)
  (debug "monimelt_enable_pragma_handler ph=" ph)
  (inform_at (pragma_lex) "MONIMELT enabling MELT")
  (set_ref monimelt_pragma_ok :true)
)

(defun monimelt_disable_pragma_handler (ph)
  (debug "monimelt_disable_pragma_handler ph=" ph)
  (set_ref monimelt_pragma_ok ())
)

(defun monimelt_attribute_handler (attr flaglist :tree tr_node tr_name tr_args) 
  (debug "monimelt_attribute_handler" " start attr=" attr
	 "; flaglist=" flaglist
	 ";\n tr_node=" tr_node
	 ";\n tr_name=" tr_name
	 ";\n tr_args=" tr_args)
  (return)
)

(defun monimelt_finish_decl (decl)
  (if (null !monimelt_pragma_ok)
      (return)) 
  (let ( (tdecl  (unbox :tree decl))
	 )
    ;; (debug "monimelt_finish_decl" " begin tdecl=" tdecl "\n")
    (match
     tdecl
     (?(tree_function_decl_named
	?(and ?tfuname ?(cstring_prefixed "mom_"))
	?tfunres)
       (debug  "monimelt_finish_decl" " function tdecl=" tdecl)
       (list_append monimelt_functions_list decl)
       )
     (?(tree_type_declaration
	;; caveat, many types start with mom without underscore
	?(and ?(tree_identifier ?(cstring_prefixed "mom")) ?tyname))
       (debug "monimelt_finish_decl" " typedecl tyname=" tyname 
	      ";\n.. tdecl=" tdecl "\n")
       (list_append monimelt_types_list decl)
       )
     (?_
      ;; (debug "monimelt_finish_decl else tdecl=" tdecl)
      (void)
      )
     )
    )
  )


;;this function should probably do the JSONRPC calls
(defun monimelt_finish_unit (arg)
  (debug "monimelt_finish_unit" " arg=" arg ";\n monimelt_types_list=" monimelt_types_list
	 ";\n monimelt_functions_list=" monimelt_functions_list)
  (let ( (momstatus (do_blocking_jsonrpc2_call monimelt_service '"state" () 350))
	 )
    (debug "monimelt_finish_unit" " momstatus=" momstatus))
  )

(defun processmonimelt_docmd (cmd moduldata)
  (debug "processmonimelt_docmd start " cmd)
  (debug "processmonimelt_docmd monimelt_service=" monimelt_service)
  (let ( (momstatus (do_blocking_jsonrpc2_call monimelt_service '"state" () 660))
	 (at (instance class_gcc_attribute
		       :named_name '"meltmom"
		       :gccattr_data (tuple 'some-data)
		       :gccattr_handler monimelt_attribute_handler))
	 )
    (debug "processmonimelt_docmd" " initial momstatus=" momstatus
	   "\n.. at=" at)
    (register_expanded_pragma 'monimelt 'enable
			      monimelt_enable_pragma_handler 
			      :true)
    (register_expanded_pragma 'monimelt 'disable
			      monimelt_disable_pragma_handler 
			      ())
    (register_gcc_attribute at :min_length 1)
    (register_finish_decl_first  monimelt_finish_decl)
    (at_finish_unit_first monimelt_finish_unit)
  
    (debug "processmonimelt_docmd end " cmd)
    (inform_at () "done MELT processing of monimelt.h")
    ;; at last
    (return :true)
    ))


(definstance process_monimelt_header_mode
  class_melt_mode
  :named_name '"process_monimelt_header"
  :meltmode_help '"process the monimelt.h header file and send some information about it to monimelt using JSONRPC"
  :meltmode_fun processmonimelt_docmd
)
(install_melt_mode process_monimelt_header_mode)
;; eof meltmom-process.melt 
